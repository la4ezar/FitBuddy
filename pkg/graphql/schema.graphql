type Query {
    # Coach
    getAllCoaches: [Coach!]!
    isCoachBookedByUser(coachName: String!, userEmail: String!): Boolean!
    isCoachBooked(coachName: String!): Boolean!
    # Goals
    getGoals(email: String!): [Goal!]!
    # Posts
    getAllPosts: [Post!]!


    getUserByID(userID: ID!): User
    getCoachByID(coachID: ID!): Coach
    getWorkoutLogByID(workoutLogID: ID!): WorkoutLog
    getNutritionLogByID(nutritionLogID: ID!): NutritionLog

}

type Mutation {
    # Users
    createUser(email: String!, password: String!): User
    loginUser(email: String!, password: String!): User
    logoutUser(email: String!): User
    # Posts
    createPost(title: String!, content: String!, email: String!): Post
    # Coaches
    bookCoach(email: ID!, coachName: ID!): Boolean!
    unbookCoach(email: ID!, coachName: ID!): Boolean!
    createCoach(name: String!, specialty: String!): Coach
    # Goals
    createGoal(name: String!, description: String!, startDate: String!, endDate: String!, email: String!): Goal

    createWorkoutLog(userID: ID!, exercise: String!, sets: Int!, reps: Int!, weight: Float!): WorkoutLog
    createNutritionLog(userID: ID!, description: String!, calories: Int!): NutritionLog
}

type User {
    ID: ID!
    Email: String!
}

type UserProfile {
    Age: Int
    Height: Float
    Weight: Float
}

type WorkoutLog {
    ID: ID!
    UserID: ID!
    Exercise: String!
    Sets: Int!
    Reps: Int!
    Weight: Float!
    Date: String!
}

type NutritionLog {
    ID: ID!
    UserID: ID!
    Description: String!
    Calories: Int!
    Date: String!
}

type Post {
    ID: ID!
    UserEmail: String!
    Title: String!
    Content: String!
    CreatedAt: String!
}

type Coach {
    ID: ID!
    ImageUrl: String!
    Name: String!
    Specialty: String!
}

type Goal {
    ID: ID!
    Name: String!
    Description: String!
    StartDate: String!
    EndDate: String!
}